[project]
name = "travelai"
version = "0.1.0"
description = "智慧旅遊行程規劃系統 - 基於 AI 的個人化旅遊規劃平台"
authors = [
    {name = "TravelAI Team", email = "team@travelai.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"

dependencies = [
    # FastAPI 核心
    "fastapi==0.104.1",
    "uvicorn[standard]==0.24.0",
    "pydantic[email]==2.5.0",
    "python-multipart==0.0.6",
    
    # 資料庫
    "sqlalchemy==2.0.23",
    "alembic==1.12.1",
    "psycopg2-binary==2.9.9",
    "geoalchemy2==0.14.2",
    "pgvector==0.2.3",
    
    # Redis
    "redis==5.0.1",
    
    # HTTP 客戶端
    "httpx==0.25.1",
    "requests==2.31.0",
    
    # LangChain & AI
    "langchain==0.0.335",
    "langchain-google-genai==0.0.5",
    "langgraph==0.0.20",
    "google-generativeai==0.3.1",
    
    # 認證與安全
    "bcrypt==4.1.1",
    "pyjwt==2.8.0",
    "python-jose[cryptography]==3.3.0",
    
    # 工具
    "python-dotenv==1.0.0",
    "pydantic-settings==2.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-asyncio",
    "httpx",
    "ruff",
    "mypy",
    "black",
    "pytest-cov",
]

[project.urls]
Homepage = "https://github.com/your-org/travelai"
Repository = "https://github.com/your-org/travelai"
Documentation = "https://github.com/your-org/travelai/docs"
"Bug Tracker" = "https://github.com/your-org/travelai/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "langgraph.*",
    "geoalchemy2.*",
    "pgvector.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]